Shiv@cog
npm init playwright	
npm inastall @cucumber/cucumber
npx cucumber-js --exit

npx playwright test --headed
--debug

 npx playwright test --ui

npm install @playwright/test@latest
mpm install --save-dev typescript


Api testing debub
shift+cntl+p and
scripts": {
    "test":"npx playwright test tests/WebApiPart1.spec.js --headed"
  },

debug npm script


typescrpt
tsc demo.ts  //it converts ts to js
node demo.js


beforeEach = 1,2,3 3tyms
beforeAll = 1,2,3  only once

npx playwright codegen http://google.com

 npx playwright test
    Runs the end-to-end tests.

  npx playwright test --ui
    Starts the interactive UI mode.

  npx playwright test --project=chromium
    Runs the tests only on Desktop Chrome.

  npx playwright test example
    Runs the tests in a specific file.

  npx playwright test --debug
    Runs the tests in debug mode.

  npx playwright codegen
    Auto generate tests with Codegen.

We suggest that you begin by typing:

    npx playwright test




const {test} = require('@playwright/test')

test.only ('Browser Context playwright test', async({browser}) => {
       const context= await browser.newContext();
       const page =  await context.newPage();
       await page.goto("https://eportal.incometax.gov.in/iec/foservices/");
});

test ('Page playwright test', async(page)=>{
        await page.goto("https://google.com");
	console.log(await page.title())
	await expect(page).toHaveTitle("Google");
});


marks.reduce((sum,mark)=> sum+mark, 0)
scores.filter(score=>score%2==0)
let mapArray = scores.map(score=>score*3)

scores.sort((a,b) => a-b))






test.only('Browser Context playwright test', async({browser}) => {
       const context= await browser.newContext();
       const page =  await context.newPage();
       await page.goto("http://localhost:3000/roomSearchController");
       console.log(await page.title());
       await page.locator("#fromDate").fill('2025-10-10')
       await page.locator("#toDate").fill('2025-10-09')
       await page.locator("button[type='submit']").click();

       
}); 




**************************************

test.only('Browser Context playwright test', async({browser}) => {
       const context= await browser.newContext();
       const page =  await context.newPage();
       const userName = page.locator("#username");
       const signIn = page.locator("#signInBtn");

       await page.goto("https://rahulshettyacademy.com/loginpagePractise/");
       console.log(await page.title());
       //css
       await userName.fill('rahulshetty')
       await page.locator("#password").fill('learning')
       await signIn.click();
       console.log(await page.locator("[style*='block']").textContent());
       await expect(page.locator("[style*='block']")).toContainText('Incorrect');

       await userName.fill("");
       await userName.fill("rahulshettyacademy");
       await signIn.click();
       console.log(await page.locator(".card-body a").first().textContent());
       console.log(await page.locator(".card-body a").nth(1).textContent());
       



       
});




********************************************************


css selectors

#username

//for attributes
[routerlink='/dashboard/cart'] = [routerlink* = 'cart']


.em-spacer-1 .ng-star-inserted  (two classes , uniq)

tables : tbody tr

button txt: "button:has-text('View')"


page.getByRole('button',{name:'Download'}).click();

*********************************************************

class ApiUtils{
    constructor(apiContext,loginPayLoad){
        this.apiContext = apiContext;
        this.loginPayLoad = loginPayLoad;
    }
    async getToken(){
        const loginResponse = await this.apiContext.post("https://rahulshettyacademy.com/api/ecom/auth/login",
        {
          data:this.loginPayLoad
       })
        const loginResponseJson = await loginResponse.json();
        const token = loginResponseJson.token;
        console.log(token);
        return token;
    }
    async createOrderId(orderPayLoad){
        let response = {};
        response.token = await this.getToken();
        const orderResponse = await this.apiContext.post("https://rahulshettyacademy.com/api/ecom/order/create-order",
        {
          data:orderPayLoad,
          headers:{
                'Authorization' :response.token,
                'Content-Type' :'application/json'
          },
       })
       const orderResponseJson = await orderResponse.json(); 
       const orderId = orderResponseJson.orders[0];  
       response.orderId = orderId;
       return response;
    }

}
module.exports = {ApiUtils};


**************************************************************

const {test, expect,request} = require('@playwright/test');
const {ApiUtils} = require('./Utils/ApiUtils');
const loginPayLoad = {userEmail:"shivapatelrangu20@gmail.com",userPassword:"Playwright@2024"};
const orderPayLoad = {orders: [{country: "Cuba", productOrderedId: "6581ca399fd99c85e8ee7f45"}]};

let response;

test.beforeAll( async() => {
    const apiContext = await request.newContext();  //{ignoreHTTPSErrors:true}
    const apiUtils = new ApiUtils(apiContext,loginPayLoad);
    response = await apiUtils.createOrderId(orderPayLoad);
})
test.only('Api testing', async ({ page }) => {
    page.addInitScript(value =>{
        window.localStorage.setItem('token',value);
    },response.token);

    await page.goto("https://rahulshettyacademy.com/client");
    await page.locator("button[routerlink*='myorders']").click();
    await page.locator("tbody").waitFor();
    const rows = await page.locator("tbody tr");

    for (let i = 0; i < await rows.count(); ++i) {
       const rowOrderId = await rows.nth(i).locator("th").textContent();
       if (response.orderId.includes(rowOrderId)) {
          await rows.nth(i).locator("button").first().click();
          break;
       }
    }
    const orderIdDetails = await page.locator(".col-text").textContent();
    await page.pause();
    expect(response.orderId.includes(orderIdDetails)).toBeTruthy();
  
 });


*********************************************
const {test, expect, request} = require('@playwright/test');
const {ApiUtils} = require('./Utils/ApiUtils');
const loginPayLoad = {userEmail:"shivapatelrangu20@gmail.com",userPassword:"Playwright@2024"};
const orderPayLoad = {orders:[{country:"Cuba",productOrderedId:"6262e95ae26b7e1a10e89bf0"}]};


let response;
test.beforeAll( async()=>
{
   const apiContext = await request.newContext({ignoreHTTPSErrors:true});
   const apiUtils = new ApiUtils(apiContext,loginPayLoad);
   response =  await apiUtils.createOrder(orderPayLoad);

})


//create order is success
test.only('@API Place the order', async ({page})=>
{ 
    page.addInitScript(value => {

        window.localStorage.setItem('token',value);
    }, response.token );
await page.goto("https://rahulshettyacademy.com/client");
 await page.locator("button[routerlink*='myorders']").click();
 await page.locator("tbody").waitFor();
const rows = await page.locator("tbody tr");


for(let i =0; i<await rows.count(); ++i)
{
   const rowOrderId =await rows.nth(i).locator("th").textContent();
   if (response.orderId.includes(rowOrderId))
   {
       await rows.nth(i).locator("button").first().click();
       break;
   }
}
const orderIdDetails =await page.locator(".col-text").textContent();
//await page.pause();
expect(response.orderId.includes(orderIdDetails)).toBeTruthy();

});

//Verify if order created is showing in history page
// Precondition - create order -





****************************************************
excel js

mkdir ExcelJSUtils
npm init
cd ExcelJSUtilsnpm init
npm install exceljs